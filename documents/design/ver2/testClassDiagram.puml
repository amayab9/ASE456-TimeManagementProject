@startuml
class MyApp {
---
build(): Widget
}
StatelessWidget <|-- MyApp
class MyHomePage {
---
build(): Widget
}
StatelessWidget <|-- MyHomePage
class PriorityPage {
---
createState(): _PriorityState
}
StatefulWidget <|-- PriorityPage
class _PriorityState {
queriedData: List<Map<String, dynamic>>
---
-_reportData(): Future<void>
build(): Widget
}
State <|-- _PriorityState
class QueryPage {
---
createState(): _QueryPageState
}
StatefulWidget <|-- QueryPage
class _QueryPageState {
queryController: TextEditingController
dropdownValue: String?
queriedData: List<String>
selectedDate: DateTime?
---
-_performQuery(): Future<void>
-_isValidDateFormat(): bool
-_formatTimestamp(): String
-_formatTime(): String
-_queryInformation(): void
build(): Widget
}
State <|-- _QueryPageState
_QueryPageState ..> TextEditingController
_QueryPageState ..> DateTime
class RecordTimePage {
---
createState(): _RecordTimePageState
}
StatefulWidget <|-- RecordTimePage
class _RecordTimePageState {
dateController: TextEditingController
fromTimeController: TextEditingController
toTimeController: TextEditingController
taskController: TextEditingController
tagController: TextEditingController
---
build(): Widget
-_saveTimeRecord(): void
-_parseDate(): DateTime
-_parseTime(): TimeOfDay
}
State <|-- _RecordTimePageState
_RecordTimePageState ..> TextEditingController
class ReportPage {
---
createState(): _ReportState
}
StatefulWidget <|-- ReportPage
class _ReportState {
startDateController: TextEditingController
endDateController: TextEditingController
queriedData: List<String>
---
-_reportData(): Future<void>
-_isValidDateFormat(): bool
-_formatTimestamp(): String
-_formatTime(): String
build(): Widget
}
State <|-- _ReportState
_ReportState ..> TextEditingController
class DefaultFirebaseOptions {
web: FirebaseOptions
android: FirebaseOptions
ios: FirebaseOptions
macos: FirebaseOptions
---
currentPlatform(): FirebaseOptions
}
DefaultFirebaseOptions ..> FirebaseOptions
class MyApp {
---
build(): Widget
}
StatelessWidget <|-- MyApp
class MyHomePage {
---
build(): Widget
}
StatelessWidget <|-- MyHomePage
class PriorityPage {
---
createState(): _PriorityState
}
StatefulWidget <|-- PriorityPage
class _PriorityState {
queriedData: List<Map<String, dynamic>>
---
build(): Widget
-_reportData(): Future<void>
}
State <|-- _PriorityState
class QueryPage {
---
createState(): _QueryPageState
}
StatefulWidget <|-- QueryPage
class _QueryPageState {
queryController: TextEditingController
dropdownValue: String?
queriedData: List<String>
selectedDate: DateTime?
---
build(): Widget
-_performQuery(): Future<void>
-_isValidDateFormat(): bool
-_formatTimestamp(): String
-_formatTime(): String
-_queryInformation(): void
}
State <|-- _QueryPageState
_QueryPageState ..> TextEditingController
_QueryPageState ..> DateTime
class RecordTimePage {
---
createState(): _RecordTimePageState
}
StatefulWidget <|-- RecordTimePage
class _RecordTimePageState {
dateController: TextEditingController
fromTimeController: TextEditingController
toTimeController: TextEditingController
taskController: TextEditingController
tagController: TextEditingController
---
build(): Widget
-_saveTimeRecord(): void
-_parseDate(): DateTime
-_parseTime(): TimeOfDay
}
State <|-- _RecordTimePageState
_RecordTimePageState ..> TextEditingController
abstract class ReportCommand {
---
execute(): void
}
class ReportDataCommand {
state: _ReportState
---
execute(): void
}
ReportDataCommand ..> _ReportState
ReportDataCommand ..|> ReportCommand
class ReportPage {
---
createState(): _ReportState
}
StatefulWidget <|-- ReportPage
class _ReportState {
startDateController: TextEditingController
endDateController: TextEditingController
queriedData: List<String>
-_command: ReportCommand?
---
build(): Widget
-_reportData(): Future<void>
-_isValidDateFormat(): bool
-_formatTimestamp(): String
-_formatTime(): String
-_executeCommand(): void
}
State <|-- _ReportState
_ReportState ..> TextEditingController
_ReportState ..> ReportCommand
class Constants {
timeRecords: String
spacingAndHeight: double
edgeInset: double
blackColor: Color
greenColor: Color
redColor: Color
---
}
Constants ..> Color
class DateTimeUtils {
---
formatTimestamp(): String
formatTime(): String
-_formatDateTime(): String
isValidDateFormat(): bool
}
class MyApp {
---
build(): Widget
}
StatelessWidget <|-- MyApp
class MyHomePage {
---
build(): Widget
}
StatelessWidget <|-- MyHomePage
class QueryPage {
---
createState(): _QueryPageState
}
StatefulWidget <|-- QueryPage
class _QueryPageState {
queryController: TextEditingController
dropdownValue: String?
queriedData: List<String>
selectedDate: DateTime?
---
-_performQuery(): Future<void>
-_isValidDateFormat(): bool
-_formatTimestamp(): String
-_formatTime(): String
-_queryInformation(): void
build(): Widget
}
State <|-- _QueryPageState
_QueryPageState ..> TextEditingController
_QueryPageState ..> DateTime
class RecordTimePage {
---
createState(): _RecordTimePageState
}
StatefulWidget <|-- RecordTimePage
class _RecordTimePageState {
dateController: TextEditingController
fromTimeController: TextEditingController
toTimeController: TextEditingController
taskController: TextEditingController
tagController: TextEditingController
---
build(): Widget
-_saveTimeRecord(): void
-_parseDate(): DateTime
-_parseTime(): TimeOfDay
}
State <|-- _RecordTimePageState
_RecordTimePageState ..> TextEditingController
class DefaultFirebaseOptions {
web: FirebaseOptions
android: FirebaseOptions
ios: FirebaseOptions
macos: FirebaseOptions
---
currentPlatform(): FirebaseOptions
}
DefaultFirebaseOptions ..> FirebaseOptions
class MyApp {
---
build(): Widget
}
StatelessWidget <|-- MyApp
class MyHomePage {
---
build(): Widget
}
StatelessWidget <|-- MyHomePage
class PriorityPage {
---
createState(): _PriorityState
}
StatefulWidget <|-- PriorityPage
class _PriorityState {
queriedData: List<Map<String, dynamic>>
---
build(): Widget
-_reportData(): Future<void>
}
State <|-- _PriorityState
class QueryPage {
---
createState(): _QueryPageState
}
StatefulWidget <|-- QueryPage
class _QueryPageState {
queryController: TextEditingController
dropdownValue: String?
queriedData: List<String>
selectedDate: DateTime?
---
build(): Widget
-_performQuery(): Future<void>
-_isValidDateFormat(): bool
-_formatTimestamp(): String
-_formatTime(): String
-_queryInformation(): void
}
State <|-- _QueryPageState
_QueryPageState ..> TextEditingController
_QueryPageState ..> DateTime
class RecordTimePage {
---
createState(): _RecordTimePageState
}
StatefulWidget <|-- RecordTimePage
class _RecordTimePageState {
dateController: TextEditingController
fromTimeController: TextEditingController
toTimeController: TextEditingController
taskController: TextEditingController
tagController: TextEditingController
---
build(): Widget
-_saveTimeRecord(): void
-_parseDate(): DateTime
-_parseTime(): TimeOfDay
}
State <|-- _RecordTimePageState
_RecordTimePageState ..> TextEditingController
abstract class ReportCommand {
---
execute(): void
}
class ReportDataCommand {
state: _ReportState
---
execute(): void
}
ReportDataCommand ..> _ReportState
ReportDataCommand ..|> ReportCommand
class ReportPage {
---
createState(): _ReportState
}
StatefulWidget <|-- ReportPage
class _ReportState {
startDateController: TextEditingController
endDateController: TextEditingController
queriedData: List<String>
-_command: ReportCommand?
---
build(): Widget
-_reportData(): Future<void>
-_isValidDateFormat(): bool
-_formatTimestamp(): String
-_formatTime(): String
-_executeCommand(): void
}
State <|-- _ReportState
_ReportState ..> TextEditingController
_ReportState ..> ReportCommand
class Constants {
timeRecords: String
spacingAndHeight: double
edgeInset: double
blackColor: Color
greenColor: Color
redColor: Color
---
}
Constants ..> Color
class DateTimeUtils {
---
formatTimestamp(): String
formatTime(): String
-_formatDateTime(): String
isValidDateFormat(): bool
}
class FirestoreExampleApp {
---
build(): Widget
}
StatelessWidget <|-- FirestoreExampleApp
class FilmList {
---
createState(): _FilmListState
}
StatefulWidget <|-- FilmList
class _FilmListState {
query: MovieQuery
---
build(): Widget
-_resetLikes(): Future<void>
}
State <|-- _FilmListState
_FilmListState ..> MovieQuery
class _MovieItem {
movie: Movie
reference: DocumentReference<Movie>
---
poster(): Widget
details(): Widget
title(): Widget
metadata(): Widget
genreItems(): List<Widget>
genres(): Widget
build(): Widget
}
StatelessWidget <|-- _MovieItem
_MovieItem ..> Movie
_MovieItem ..> DocumentReference
class Likes {
reference: DocumentReference<Movie>
currentLikes: int
---
createState(): _LikesState
}
StatefulWidget <|-- Likes
Likes ..> DocumentReference
class _LikesState {
-_likes: int
---
-_onLike(): Future<void>
didUpdateWidget(): void
build(): Widget
}
State <|-- _LikesState
class Movie {
poster: String
likes: int
title: String
year: int
runtime: String
rated: String
genre: List<String>
---
toJson(): Map<String, Object?>
}
class DefaultFirebaseOptions {
web: FirebaseOptions
android: FirebaseOptions
ios: FirebaseOptions
macos: FirebaseOptions
---
currentPlatform(): FirebaseOptions
}
DefaultFirebaseOptions ..> FirebaseOptions
class DefaultFirebaseOptions {
web: FirebaseOptions
android: FirebaseOptions
ios: FirebaseOptions
macos: FirebaseOptions
---
currentPlatform(): FirebaseOptions
}
DefaultFirebaseOptions ..> FirebaseOptions
class ConverterPlaceholder {
firestore: DocumentSnapshot<Map<String, Object?>>
getOptions: SnapshotOptions?
---
toFirestore(): Map<String, Object?>
}
ConverterPlaceholder ..> DocumentSnapshot
ConverterPlaceholder ..> SnapshotOptions
class DefaultFirebaseOptions {
web: FirebaseOptions
android: FirebaseOptions
ios: FirebaseOptions
macos: FirebaseOptions
---
currentPlatform(): FirebaseOptions
}
DefaultFirebaseOptions ..> FirebaseOptions
class FirestoreExampleApp {
---
build(): Widget
}
StatelessWidget <|-- FirestoreExampleApp
class FilmList {
---
createState(): _FilmListState
}
StatefulWidget <|-- FilmList
class _FilmListState {
query: MovieQuery
---
build(): Widget
-_resetLikes(): Future<void>
}
State <|-- _FilmListState
_FilmListState ..> MovieQuery
class _MovieItem {
movie: Movie
reference: DocumentReference<Movie>
---
poster(): Widget
details(): Widget
title(): Widget
metadata(): Widget
genreItems(): List<Widget>
genres(): Widget
build(): Widget
}
StatelessWidget <|-- _MovieItem
_MovieItem ..> Movie
_MovieItem ..> DocumentReference
class Likes {
reference: DocumentReference<Movie>
currentLikes: int
---
createState(): _LikesState
}
StatefulWidget <|-- Likes
Likes ..> DocumentReference
class _LikesState {
-_likes: int
---
-_onLike(): Future<void>
didUpdateWidget(): void
build(): Widget
}
State <|-- _LikesState
class Movie {
poster: String
likes: int
title: String
year: int
runtime: String
rated: String
genre: List<String>
---
toJson(): Map<String, Object?>
}
class AggregateQuery {
query: Query
-_delegate: AggregateQueryPlatform
---
get(): Future<AggregateQuerySnapshot>
}
AggregateQuery ..> Query
AggregateQuery ..> AggregateQueryPlatform
class AggregateQuerySnapshot {
-_delegate: AggregateQuerySnapshotPlatform
query: Query
---
count(): int
}
AggregateQuerySnapshot ..> AggregateQuerySnapshotPlatform
AggregateQuerySnapshot ..> Query
abstract class CollectionReference {
---
id(): String
parent(): DocumentReference<Map<String, dynamic>>?
path(): String
add(): Future<DocumentReference<T>>
doc(): DocumentReference<T>
withConverter(): CollectionReference<R>
}
CollectionReference ..|> Query
class _JsonCollectionReference {
---
-_delegate(): CollectionReferencePlatform
id(): String
parent(): DocumentReference<Map<String, dynamic>>?
path(): String
add(): Future<DocumentReference<Map<String, dynamic>>>
doc(): DocumentReference<Map<String, dynamic>>
withConverter(): CollectionReference<R>
==(): bool
hashCode(): int
toString(): String
}
_JsonQuery <|-- _JsonCollectionReference
_JsonCollectionReference ..|> CollectionReference
class _WithConverterCollectionReference {
---
-_originalCollectionReferenceQuery(): CollectionReference<Map<String, dynamic>>
id(): String
parent(): DocumentReference<Map<String, dynamic>>?
path(): String
add(): Future<DocumentReference<T>>
doc(): DocumentReference<T>
withConverter(): CollectionReference<R>
==(): bool
hashCode(): int
toString(): String
}
_WithConverterQuery <|-- _WithConverterCollectionReference
_WithConverterCollectionReference ..|> CollectionReference
abstract class DocumentChange {
---
type(): DocumentChangeType
oldIndex(): int
newIndex(): int
doc(): DocumentSnapshot<T>
}
class _JsonDocumentChange {
-_delegate: DocumentChangePlatform
-_firestore: FirebaseFirestore
---
type(): DocumentChangeType
oldIndex(): int
newIndex(): int
doc(): DocumentSnapshot<Map<String, dynamic>>
}
_JsonDocumentChange ..> DocumentChangePlatform
_JsonDocumentChange ..> FirebaseFirestore
_JsonDocumentChange ..|> DocumentChange
class _WithConverterDocumentChange {
-_originalDocumentChange: DocumentChange<Map<String, dynamic>>
-_fromFirestore: FromFirestore<T>
-_toFirestore: ToFirestore<T>
---
type(): DocumentChangeType
oldIndex(): int
newIndex(): int
doc(): DocumentSnapshot<T>
}
_WithConverterDocumentChange ..> DocumentChange
_WithConverterDocumentChange ..> FromFirestore
_WithConverterDocumentChange ..> ToFirestore
_WithConverterDocumentChange ..|> DocumentChange
abstract class DocumentReference {
---
-_delegate(): DocumentReferencePlatform
firestore(): FirebaseFirestore
id(): String
parent(): CollectionReference<T>
path(): String
collection(): CollectionReference<Map<String, dynamic>>
delete(): Future<void>
update(): Future<void>
get(): Future<DocumentSnapshot<T>>
snapshots(): Stream<DocumentSnapshot<T>>
set(): Future<void>
withConverter(): DocumentReference<R>
}
class _JsonDocumentReference {
-_delegate: DocumentReferencePlatform
firestore: FirebaseFirestore
---
id(): String
parent(): CollectionReference<Map<String, dynamic>>
path(): String
collection(): CollectionReference<Map<String, dynamic>>
delete(): Future<void>
get(): Future<DocumentSnapshot<Map<String, dynamic>>>
snapshots(): Stream<DocumentSnapshot<Map<String, dynamic>>>
set(): Future<void>
update(): Future<void>
withConverter(): DocumentReference<T>
==(): bool
hashCode(): int
toString(): String
}
_JsonDocumentReference ..> DocumentReferencePlatform
_JsonDocumentReference ..> FirebaseFirestore
_JsonDocumentReference ..|> DocumentReference
class _WithConverterDocumentReference {
-_originalDocumentReference: DocumentReference<Map<String, dynamic>>
-_fromFirestore: FromFirestore<T>
-_toFirestore: ToFirestore<T>
---
collection(): CollectionReference<Map<String, dynamic>>
delete(): Future<void>
get(): Future<_WithConverterDocumentSnapshot<T>>
-_delegate(): DocumentReferencePlatform
firestore(): FirebaseFirestore
id(): String
parent(): CollectionReference<T>
path(): String
set(): Future<void>
snapshots(): Stream<_WithConverterDocumentSnapshot<T>>
update(): Future<void>
withConverter(): DocumentReference<R>
==(): bool
hashCode(): int
toString(): String
}
_WithConverterDocumentReference ..> DocumentReference
_WithConverterDocumentReference ..> FromFirestore
_WithConverterDocumentReference ..> ToFirestore
_WithConverterDocumentReference ..|> DocumentReference
class SnapshotOptions {
---
}
abstract class DocumentSnapshot {
---
id(): String
reference(): DocumentReference<T>
metadata(): SnapshotMetadata
exists(): bool
data(): T?
get(): dynamic
[](): dynamic
}
class _JsonDocumentSnapshot {
-_firestore: FirebaseFirestore
-_delegate: DocumentSnapshotPlatform
reference: DocumentReference<Map<String, dynamic>>
metadata: SnapshotMetadata
---
id(): String
exists(): bool
data(): Map<String, dynamic>?
get(): dynamic
[](): dynamic
}
_JsonDocumentSnapshot ..> FirebaseFirestore
_JsonDocumentSnapshot ..> DocumentSnapshotPlatform
_JsonDocumentSnapshot ..> DocumentReference
_JsonDocumentSnapshot ..> SnapshotMetadata
_JsonDocumentSnapshot ..|> DocumentSnapshot
class _WithConverterDocumentSnapshot {
-_originalDocumentSnapshot: DocumentSnapshot<Map<String, dynamic>>
-_fromFirestore: FromFirestore<T>
-_toFirestore: ToFirestore<T>
---
data(): T?
exists(): bool
id(): String
metadata(): SnapshotMetadata
reference(): DocumentReference<T>
get(): dynamic
[](): dynamic
}
_WithConverterDocumentSnapshot ..> DocumentSnapshot
_WithConverterDocumentSnapshot ..> FromFirestore
_WithConverterDocumentSnapshot ..> ToFirestore
_WithConverterDocumentSnapshot ..|> DocumentSnapshot
class FieldValue {
-_factory: FieldValueFactoryPlatform
-_delegate: dynamic
---
arrayUnion(): FieldValue
arrayRemove(): FieldValue
delete(): FieldValue
serverTimestamp(): FieldValue
increment(): FieldValue
toString(): String
==(): bool
hashCode(): int
}
FieldValuePlatform <|-- FieldValue
FieldValue ..> FieldValueFactoryPlatform
class _FilterObject {
---
build(): Map<String, Object?>
}
class _FilterQuery {
-_field: Object
-_operator: String
-_value: Object?
---
build(): Map<String, Object?>
}
_FilterObject <|-- _FilterQuery
class _FilterOperator {
-_operator: String
-_queries: List<_FilterObject>
---
build(): Map<String, Object>
}
_FilterObject <|-- _FilterOperator
class Filter {
-_filterQuery: _FilterQuery?
-_filterOperator: _FilterOperator?
---
-_getOperator(): String
-_getValue(): Object?
or(): Filter
and(): Filter
-_generateFilter(): Filter
toJson(): Map<String, Object?>
}
FilterPlatformInterface <|-- Filter
Filter ..> _FilterQuery
Filter ..> _FilterOperator
class FirebaseFirestore {
-_cachedInstances: Map<String, FirebaseFirestore>
-_delegatePackingProperty: FirebaseFirestorePlatform?
app: FirebaseApp
databaseURL: String
---
instance(): FirebaseFirestore
instanceFor(): FirebaseFirestore
-_delegate(): FirebaseFirestorePlatform
collection(): CollectionReference<Map<String, dynamic>>
batch(): WriteBatch
clearPersistence(): Future<void>
enablePersistence(): Future<void>
loadBundle(): LoadBundleTask
useFirestoreEmulator(): void
namedQueryWithConverterGet(): Future<QuerySnapshot<T>>
namedQueryGet(): Future<QuerySnapshot<Map<String, dynamic>>>
collectionGroup(): Query<Map<String, dynamic>>
disableNetwork(): Future<void>
doc(): DocumentReference<Map<String, dynamic>>
enableNetwork(): Future<void>
snapshotsInSync(): Stream<void>
runTransaction(): Future<T>
settings(): void
settings(): Settings
terminate(): Future<void>
waitForPendingWrites(): Future<void>
setIndexConfiguration(): Future<void>
setIndexConfigurationFromJSON(): Future<void>
setLoggingEnabled(): Future<void>
==(): bool
hashCode(): int
toString(): String
}
FirebasePluginPlatform <|-- FirebaseFirestore
FirebaseFirestore ..> FirebaseFirestorePlatform
FirebaseFirestore ..> FirebaseApp
class LoadBundleTask {
-_delegate: LoadBundleTaskPlatform
stream: Stream<LoadBundleTaskSnapshot>
---
}
LoadBundleTask ..> LoadBundleTaskPlatform
LoadBundleTask ..> Stream
class LoadBundleTaskSnapshot {
-_delegate: LoadBundleTaskSnapshotPlatform
---
bytesLoaded(): int
documentsLoaded(): int
taskState(): LoadBundleTaskState
totalBytes(): int
totalDocuments(): int
}
LoadBundleTaskSnapshot ..> LoadBundleTaskSnapshotPlatform
abstract class Query {
---
firestore(): FirebaseFirestore
parameters(): Map<String, dynamic>
endAtDocument(): Query<T>
endAt(): Query<T>
endBeforeDocument(): Query<T>
endBefore(): Query<T>
get(): Future<QuerySnapshot<T>>
limit(): Query<T>
limitToLast(): Query<T>
snapshots(): Stream<QuerySnapshot<T>>
orderBy(): Query<T>
startAfterDocument(): Query<T>
startAfter(): Query<T>
startAtDocument(): Query<T>
startAt(): Query<T>
where(): Query<T>
withConverter(): Query<R>
count(): AggregateQuery
}
class _JsonQuery {
firestore: FirebaseFirestore
-_delegate: QueryPlatform
---
parameters(): Map<String, dynamic>
-_hasStartCursor(): bool
-_hasEndCursor(): bool
-_isInequality(): bool
isNotIn(): bool
-_assertQueryCursorSnapshot(): Map<String, dynamic>
-_assertQueryCursorValues(): Iterable<dynamic>
-_assertValidFieldType(): void
endAtDocument(): Query<Map<String, dynamic>>
endAt(): Query<Map<String, dynamic>>
endBeforeDocument(): Query<Map<String, dynamic>>
endBefore(): Query<Map<String, dynamic>>
get(): Future<QuerySnapshot<Map<String, dynamic>>>
limit(): Query<Map<String, dynamic>>
limitToLast(): Query<Map<String, dynamic>>
snapshots(): Stream<QuerySnapshot<Map<String, dynamic>>>
orderBy(): Query<Map<String, dynamic>>
startAfterDocument(): Query<Map<String, dynamic>>
startAfter(): Query<Map<String, dynamic>>
startAtDocument(): Query<Map<String, dynamic>>
startAt(): Query<Map<String, dynamic>>
where(): Query<Map<String, dynamic>>
withConverter(): Query<R>
==(): bool
hashCode(): int
count(): AggregateQuery
}
_JsonQuery ..> FirebaseFirestore
_JsonQuery ..> QueryPlatform
_JsonQuery ..|> Query
class _WithConverterQuery {
-_originalQuery: Query<Map<String, dynamic>>
-_fromFirestore: FromFirestore<T>
-_toFirestore: ToFirestore<T>
---
firestore(): FirebaseFirestore
parameters(): Map<String, dynamic>
-_mapQuery(): Query<T>
get(): Future<QuerySnapshot<T>>
snapshots(): Stream<QuerySnapshot<T>>
endAt(): Query<T>
endAtDocument(): Query<T>
endBefore(): Query<T>
endBeforeDocument(): Query<T>
limit(): Query<T>
limitToLast(): Query<T>
orderBy(): Query<T>
startAfter(): Query<T>
startAfterDocument(): Query<T>
startAt(): Query<T>
startAtDocument(): Query<T>
where(): Query<T>
withConverter(): Query<R>
==(): bool
hashCode(): int
count(): AggregateQuery
}
_WithConverterQuery ..> Query
_WithConverterQuery ..> FromFirestore
_WithConverterQuery ..> ToFirestore
_WithConverterQuery ..|> Query
abstract class QueryDocumentSnapshot {
---
data(): T
}
QueryDocumentSnapshot ..|> DocumentSnapshot
class _JsonQueryDocumentSnapshot {
---
exists(): bool
data(): Map<String, dynamic>
}
_JsonDocumentSnapshot <|-- _JsonQueryDocumentSnapshot
_JsonQueryDocumentSnapshot ..|> QueryDocumentSnapshot
class _WithConverterQueryDocumentSnapshot {
---
exists(): bool
data(): T
}
_WithConverterDocumentSnapshot <|-- _WithConverterQueryDocumentSnapshot
_WithConverterQueryDocumentSnapshot ..|> QueryDocumentSnapshot
abstract class QuerySnapshot {
---
docs(): List<QueryDocumentSnapshot<T>>
docChanges(): List<DocumentChange<T>>
metadata(): SnapshotMetadata
size(): int
}
class _JsonQuerySnapshot {
-_firestore: FirebaseFirestore
-_delegate: QuerySnapshotPlatform
---
docs(): List<QueryDocumentSnapshot<Map<String, dynamic>>>
docChanges(): List<DocumentChange<Map<String, dynamic>>>
metadata(): SnapshotMetadata
size(): int
}
_JsonQuerySnapshot ..> FirebaseFirestore
_JsonQuerySnapshot ..> QuerySnapshotPlatform
_JsonQuerySnapshot ..|> QuerySnapshot
class _WithConverterQuerySnapshot {
-_originalQuerySnapshot: QuerySnapshot<Map<String, dynamic>>
-_fromFirestore: FromFirestore<T>
-_toFirestore: ToFirestore<T>
---
docs(): List<QueryDocumentSnapshot<T>>
docChanges(): List<DocumentChange<T>>
metadata(): SnapshotMetadata
size(): int
}
_WithConverterQuerySnapshot ..> QuerySnapshot
_WithConverterQuerySnapshot ..> FromFirestore
_WithConverterQuerySnapshot ..> ToFirestore
_WithConverterQuerySnapshot ..|> QuerySnapshot
class SnapshotMetadata {
-_delegate: SnapshotMetadataPlatform
---
hasPendingWrites(): bool
isFromCache(): bool
}
SnapshotMetadata ..> SnapshotMetadataPlatform
class Transaction {
-_firestore: FirebaseFirestore
-_delegate: TransactionPlatform
---
get(): Future<DocumentSnapshot<T>>
delete(): Transaction
update(): Transaction
set(): Transaction
}
Transaction ..> FirebaseFirestore
Transaction ..> TransactionPlatform
class _CodecUtility {
---
replaceValueWithDelegatesInMap(): Map<String, dynamic>?
replaceValueWithDelegatesInMapFieldPath(): Map<FieldPath, dynamic>?
replaceValueWithDelegatesInArray(): List<dynamic>?
replaceDelegatesWithValueInMap(): Map<String, dynamic>?
replaceDelegatesWithValueInArray(): List<dynamic>?
valueEncode(): dynamic
valueDecode(): dynamic
}
class WriteBatch {
-_firestore: FirebaseFirestore
-_delegate: WriteBatchPlatform
---
commit(): Future<void>
delete(): void
set(): void
update(): void
}
WriteBatch ..> FirebaseFirestore
WriteBatch ..> WriteBatchPlatform
class TestFirestoreMessageCodec {
-_kDocumentReference: int
-_kArrayUnion: int
-_kArrayRemove: int
-_kDelete: int
-_kServerTimestamp: int
-_kFirestoreInstance: int
-_kFirestoreQuery: int
-_kFirestoreSettings: int
-_kIncrementDouble: int
-_kIncrementInteger: int
---
readValueOfType(): Object?
}
FirestoreMessageCodec <|-- TestFirestoreMessageCodec
class DefaultFirebaseOptions {
web: FirebaseOptions
android: FirebaseOptions
ios: FirebaseOptions
macos: FirebaseOptions
---
currentPlatform(): FirebaseOptions
}
DefaultFirebaseOptions ..> FirebaseOptions
class MyApp {
---
name(): String
initializeDefault(): Future<void>
initializeDefaultFromAndroidResource(): Future<void>
initializeSecondary(): Future<void>
apps(): void
options(): void
delete(): Future<void>
build(): Widget
}
StatelessWidget <|-- MyApp
class Firebase {
delegatePackingProperty: FirebasePlatform?
---
-_delegate(): FirebasePlatform
apps(): List<FirebaseApp>
initializeApp(): Future<FirebaseApp>
app(): FirebaseApp
==(): bool
hashCode(): int
toString(): String
}
Firebase ..> FirebasePlatform
class FirebaseApp {
-_delegate: FirebaseAppPlatform
---
delete(): Future<void>
name(): String
options(): FirebaseOptions
isAutomaticDataCollectionEnabled(): bool
setAutomaticDataCollectionEnabled(): Future<void>
setAutomaticResourceManagementEnabled(): Future<void>
==(): bool
hashCode(): int
toString(): String
}
FirebaseApp ..> FirebaseAppPlatform
class MockFirebaseCore {
---
app(): FirebaseAppPlatform
initializeApp(): Future<FirebaseAppPlatform>
apps(): List<FirebaseAppPlatform>
}
Mock <|-- MockFirebaseCore
MockFirebaseCore ..|> FirebasePlatform
class FakeFirebaseAppPlatform {
---
}
Fake <|-- FakeFirebaseAppPlatform
FakeFirebaseAppPlatform ..|> FirebaseAppPlatform
@enduml
